const express = require('express');
const multer = require('multer');
const path = require('path');
const db = require('../config/database');
const { authenticateToken, authorizeAdmin } = require('../middleware/auth');

const router = express.Router();

// Multer yapılandırması
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/specialists/');
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'specialist-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Sadece resim dosyaları yüklenebilir'));
    }
  }
});

// Tüm uzmanları getir
router.get('/', async (req, res) => {
  try {
    const [specialists] = await db.execute(`
      SELECT 
        s.*,
        sr.average_rating,
        sr.total_reviews
      FROM specialists s
      LEFT JOIN specialist_ratings sr ON s.id = sr.id
      WHERE s.status = 'active'
      ORDER BY sr.average_rating DESC
    `);
    
    res.json(specialists);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Uzmanlar alınırken bir hata oluştu' });
  }
});

// Uzman detayı getir
router.get('/:id', async (req, res) => {
  try {
    const specialist_id = req.params.id;
    
    // Uzman bilgilerini al
    const [specialists] = await db.execute(`
      SELECT 
        s.*,
        sr.average_rating,
        sr.total_reviews
      FROM specialists s
      LEFT JOIN specialist_ratings sr ON s.id = sr.id
      WHERE s.id = ?
    `, [specialist_id]);
    
    if (specialists.length === 0) {
      return res.status(404).json({ error: 'Uzman bulunamadı' });
    }
    
    const specialist = specialists[0];
    
    // Uzmanın verdiği hizmetleri al
    const [services] = await db.execute(`
      SELECT s.* 
      FROM services s
      JOIN specialist_services ss ON s.id = ss.service_id
      WHERE ss.specialist_id = ? AND s.is_active = TRUE
    `, [specialist_id]);
    
    // Çalışma saatlerini al
    const [schedules] = await db.execute(
      'SELECT * FROM specialist_schedules WHERE specialist_id = ? AND is_active = TRUE ORDER BY day_of_week',
      [specialist_id]
    );
    
    specialist.services = services;
    specialist.schedules = schedules;
    
    res.json(specialist);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Uzman bilgileri alınırken bir hata oluştu' });
  }
});

// Yeni uzman ekle (Admin)
router.post('/', [authenticateToken, authorizeAdmin, upload.single('photo')], async (req, res) => {
  try {
    const { name, title, specialization, experience_years, bio, status } = req.body;
    const photo_url = req.file ? `/uploads/specialists/${req.file.filename}` : null;
    
    const [result] = await db.execute(`
      INSERT INTO specialists 
      (name, title, specialization, experience_years, bio, photo_url, status) 
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [name, title, specialization, experience_years || 0, bio, photo_url, status || 'active']);
    
    res.status(201).json({
      message: 'Uzman başarıyla eklendi',
      specialist_id: result.insertId
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Uzman eklenirken bir hata oluştu' });
  }
});

// Uzman güncelle (Admin)
router.put('/:id', [authenticateToken, authorizeAdmin, upload.single('photo')], async (req, res) => {
  try {
    const specialist_id = req.params.id;
    const { name, title, specialization, experience_years, rating, bio, status } = req.body;
    
    let updateQuery = `
      UPDATE specialists 
      SET name = ?, title = ?, specialization = ?, experience_years = ?, rating = ?, bio = ?, status = ?
    `;
    const params = [name, title, specialization, experience_years, rating, bio, status];
    
    if (req.file) {
      updateQuery += ', photo_url = ?';
      params.push(`/uploads/specialists/${req.file.filename}`);
    }
    
    updateQuery += ' WHERE id = ?';
    params.push(specialist_id);
    
    await db.execute(updateQuery, params);
    
    res.json({ message: 'Uzman bilgileri güncellendi' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Uzman güncellenirken bir hata oluştu' });
  }
});

// Uzman sil (Admin)
router.delete('/:id', [authenticateToken, authorizeAdmin], async (req, res) => {
  try {
    const specialist_id = req.params.id;
    
    // Önce aktif randevuları kontrol et
    const [appointments] = await db.execute(
      'SELECT COUNT(*) as count FROM appointments WHERE specialist_id = ? AND status = "upcoming"',
      [specialist_id]
    );
    
    if (appointments[0].count > 0) {
      return res.status(400).json({ 
        error: 'Bu uzmanın aktif randevuları var. Önce randevuları iptal edin veya tamamlayın.' 
      });
    }
    
    // Uzmanı pasif yap (silme yerine)
    await db.execute(
      'UPDATE specialists SET status = "inactive" WHERE id = ?',
      [specialist_id]
    );
    
    res.json({ message: 'Uzman başarıyla silindi' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Uzman silinirken bir hata oluştu' });
  }
});

module.exports = router;