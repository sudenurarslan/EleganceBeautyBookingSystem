const express = require('express');
const { body, validationResult } = require('express-validator');
const db = require('../config/database');
const { authenticateToken } = require('../middleware/auth');

const router = express.Router();

// Değerlendirme ekle
router.post('/', authenticateToken, [
  body('appointment_id').isInt().withMessage('Geçerli bir randevu seçin'),
  body('rating').isInt({ min: 1, max: 5 }).withMessage('Değerlendirme 1-5 arasında olmalı')
], async (req, res) => {
  try {
    const { appointment_id, rating, comment } = req.body;
    const user_id = req.user.id;
    
    // Randevu kontrolü
    const [appointments] = await db.execute(`
      SELECT * FROM appointments 
      WHERE id = ? AND user_id = ? AND status = 'completed'
    `, [appointment_id, user_id]);
    
    if (appointments.length === 0) {
      return res.status(404).json({ error: 'Değerlendirilebilecek randevu bulunamadı' });
    }
    
    const appointment = appointments[0];
    
    // Daha önce değerlendirilmiş mi?
    const [existingReviews] = await db.execute(
      'SELECT id FROM reviews WHERE appointment_id = ?',
      [appointment_id]
    );
    
    if (existingReviews.length > 0) {
      return res.status(400).json({ error: 'Bu randevu zaten değerlendirilmiş' });
    }
    
    // Değerlendirme ekle
    await db.execute(`
      INSERT INTO reviews 
      (appointment_id, user_id, specialist_id, service_id, rating, comment) 
      VALUES (?, ?, ?, ?, ?, ?)
    `, [appointment_id, user_id, appointment.specialist_id, appointment.service_id, rating, comment]);
    
    res.status(201).json({ message: 'Değerlendirmeniz için teşekkürler!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Değerlendirme eklenirken bir hata oluştu' });
  }
});

// Uzman değerlendirmelerini getir
router.get('/specialist/:id', async (req, res) => {
  try {
    const specialist_id = req.params.id;
    
    const [reviews] = await db.execute(`
      SELECT 
        r.*,
        u.full_name as user_name,
        s.name as service_name
      FROM reviews r
      JOIN users u ON r.user_id = u.id
      JOIN services s ON r.service_id = s.id
      WHERE r.specialist_id = ?
      ORDER BY r.created_at DESC
      LIMIT 20
    `, [specialist_id]);
    
    res.json(reviews);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Değerlendirmeler alınırken bir hata oluştu' });
  }
});

module.exports = router;