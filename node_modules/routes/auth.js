const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const db = require('../config/database');

const router = express.Router();

// Kayıt ol
router.post('/register', [
  body('full_name').notEmpty().withMessage('Ad soyad gerekli'),
  body('email').isEmail().withMessage('Geçerli bir email adresi girin'),
  body('password').isLength({ min: 8 }).withMessage('Şifre en az 8 karakter olmalı'),
  body('phone').notEmpty().withMessage('Telefon numarası gerekli')
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const { full_name, email, password, phone, birth_date } = req.body;
    
    // Email kontrolü
    const [existingUser] = await db.execute(
      'SELECT id FROM users WHERE email = ?',
      [email]
    );
    
    if (existingUser.length > 0) {
      return res.status(400).json({ error: 'Bu email adresi zaten kayıtlı' });
    }
    
    // Şifre hashleme
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Kullanıcı oluşturma
    const [result] = await db.execute(
      'INSERT INTO users (full_name, email, password_hash, phone, birth_date) VALUES (?, ?, ?, ?, ?)',
      [full_name, email, hashedPassword, phone, birth_date || null]
    );
    
    // Token oluşturma
    const token = jwt.sign(
      { id: result.insertId, email, role: 'customer' },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    res.status(201).json({
      message: 'Kayıt başarılı',
      token,
      user: {
        id: result.insertId,
        full_name,
        email,
        phone,
        role: 'customer'
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Kayıt sırasında bir hata oluştu' });
  }
});

// Giriş yap
router.post('/login', [
  body('email').isEmail().withMessage('Geçerli bir email adresi girin'),
  body('password').notEmpty().withMessage('Şifre gerekli')
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const { email, password } = req.body;
    
    // Kullanıcı kontrolü
    const [users] = await db.execute(
      'SELECT * FROM users WHERE email = ? AND is_active = TRUE',
      [email]
    );
    
    if (users.length === 0) {
      return res.status(401).json({ error: 'Email veya şifre hatalı' });
    }
    
    const user = users[0];
    
    // Şifre kontrolü
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    if (!isValidPassword) {
      return res.status(401).json({ error: 'Email veya şifre hatalı' });
    }
    
    // Token oluşturma
    const token = jwt.sign(
      { id: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    // Session kaydı
    await db.execute(
      'INSERT INTO user_sessions (user_id, session_token, ip_address, user_agent, expires_at) VALUES (?, ?, ?, ?, DATE_ADD(NOW(), INTERVAL 7 DAY))',
      [user.id, token, req.ip, req.get('User-Agent')]
    );
    
    res.json({
      message: 'Giriş başarılı',
      token,
      user: {
        id: user.id,
        full_name: user.full_name,
        email: user.email,
        phone: user.phone,
        role: user.role
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Giriş sırasında bir hata oluştu' });
  }
});

module.exports = router;